@using AWS_SAM_Note_App_FrontEnd.Pages
@inject NoteState NoteState
@inject UserService UserService
@inject NavigationManager Navigation
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="border-style d-flex flex-column p-2 gap-2 sidebar @(isCollapsed ? "collapsed" : string.Empty)">
    <div class="sidebar-header d-flex align-items-center justify-content-between">
        <div class="d-flex align-items-center gap-2">
            <div class="brand-dot"></div>
            <h5 class="m-0"><span class="label">EasyNote</span></h5>
        </div>
        <button class="sidebar-item" title="Toggle" @onclick="ToggleCollapse"><i class="bi bi-layout-sidebar"></i><span
                class="label">Toggle</span></button>
    </div>

    <div class="sidebar-item" @onclick='() => NavigateTo("/home")'><i class="bi bi-house"></i><span
            class="label">Home</span></div>
    <div class="sidebar-item" @onclick='() => NavigateTo("/notes")'><i class="bi bi-stickies"></i><span
            class="label">Notes</span></div>
    <div class="sidebar-item" @onclick='() => NavigateTo("/notes")'><i class="bi bi-plus"></i><span class="label">Add
            Note</span></div>
    <div class="sidebar-item" @onclick="() => NavigateToCalendar()"><i class="bi bi-calendar-event"></i><span
            class="label">Calendar</span></div>
    <div class="sidebar-item" @onclick='() => NavigateTo("/category")'><i class="bi bi-tag"></i><span
            class="label">Categories</span></div>
    <div class="sidebar-item" @onclick="SignOut"><i class="bi bi-box-arrow-right"></i><span class="label">Logout</span>
    </div>

</div>

@code {
    [Parameter]
    public User CurrentUser { get; set; } = new();

    [Parameter]
    public EventCallback OnAddNote { get; set; }
    private bool isCollapsed = true;

    protected override async Task OnInitializedAsync()
    {
        await GetUserId();
        await GetUser();
    }

    private async Task OnAddNoteClicked()
    {
        await OnAddNote.InvokeAsync(); // Properly trigger the callback
        Navigation.NavigateTo("/notes");
    }

    private async Task SignOut()
    {
        await localStorage.RemoveItemAsync("id_token");
        await localStorage.RemoveItemAsync("access_token");
        await localStorage.RemoveItemAsync("tokens");
        Navigation.NavigateTo("/");
    }

    private void NavigateTo(string url)
    {
        Navigation.NavigateTo(url);
    }

    private void NavigateToCalendar()
    {
        Navigation.NavigateTo("/calendar");
    }

    private string GetActiveClass(string url)
    {
        return Navigation.Uri.EndsWith(url, StringComparison.OrdinalIgnoreCase) ? "active" : string.Empty;
    }

    private void ToggleCollapse()
    {
        isCollapsed = !isCollapsed;
    }

    private async Task GetUserId()
    {
        var userId = await UserService.GetUserIdAsync();
        if (!string.IsNullOrEmpty(userId) && userId != "Error" && userId != "Token missing")
        {
            await localStorage.SetItemAsync("user_id", userId);
            Console.WriteLine($"✅ User ID stored: {userId}");
        }
        else
        {
            Console.WriteLine("❌ Failed to get User ID");
        }
    }

    private async Task GetUser()
    {
        var user = await UserService.GetUserDetailsAsync();
        CurrentUser.Username = user.Username;
        Console.WriteLine(user.Username);
    }

    private async Task DeleteUser()
    {

    }

    private async Task UpdateUser()
    {

    }


}
