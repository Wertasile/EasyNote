@page "/register"
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<div class="auth">
    <div class="auth-card">
        <div class="auth-brand">
            <img src="public/Images/EasyNote_Logo.png" alt="EasyNote" class="auth-logo" />
            <div>
                <h3 class="m-0">Create your account</h3>
                <div class="opacity-75">It only takes a minute to get started.</div>
            </div>
        </div>

        <EditForm Model="registerModel" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Email address</label>
                <InputText type="email" @bind-Value="registerModel.Email" class="form-control input-elevated" />
                <span class="text-danger">@emailError</span>
            </div>
            <div class="mb-3">
                <label class="form-label">Username</label>
                <InputText @bind-Value="registerModel.Username" class="form-control input-elevated" />
                <span class="text-danger">@usernameError</span>
            </div>
            <div class="mb-3">
                <label class="form-label">Password</label>
                <InputText type="password" @bind-Value="registerModel.Password" class="form-control input-elevated" />
                <span class="text-danger">@passwordError</span>
            </div>

            <button type="submit" class="btn btn-primary w-100">Create account</button>
            <div class="text-danger mt-2">@errorMessage</div>
        </EditForm>

        <div class="text-center mt-3 small opacity-75">
            Already have an account? <a href="/" class="btn-link">Sign in</a>
        </div>

        @if (showConfirmation)
        {
            <div class="confirm-card mt-3 p-3">
                <h5 class="m-0">Email confirmation</h5>
                <div class="opacity-75 small mb-2">Enter the code sent to your email to activate your account.</div>

                <div class="d-flex gap-2 align-items-center">
                    <InputText @bind-Value="confirmationCode" class="form-control input-elevated"
                        placeholder="Verification code" />
                    <button class="btn btn-success" @onclick="ConfirmSignUp">Confirm</button>
                    <button class="btn btn-secondary" @onclick="ResendCode">Resend</button>
                </div>
                <div class="text-danger mt-2">@confirmationError</div>
            </div>
        }
    </div>

    <div class="auth-art" aria-hidden="true">
        <div class="orb orb-1"></div>
        <div class="orb orb-2"></div>
        <div class="orb orb-3"></div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string confirmationCode;
    private bool showConfirmation = false;
    private string errorMessage, confirmationError;
    private string emailError, usernameError, passwordError;

    private class RegisterModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
        public string Username { get; set; }
    }

    private async Task HandleRegistration()
    {
        emailError = usernameError = passwordError = errorMessage = ""; // clear errors first

        if (string.IsNullOrWhiteSpace(registerModel.Email))
        {
            emailError = "Email is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(registerModel.Username))
        {
            usernameError = "Username is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(registerModel.Password))
        {
            passwordError = "Password is required.";
            return;
        }

        try
        {
            bool result = await AuthService.RegisterUser(registerModel.Username, registerModel.Password, registerModel.Email);
            if (result)
            {
                showConfirmation = true;
            }
            else
            {
                errorMessage = "Registration failed. Please check your details and try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }


    private async Task ConfirmSignUp()
    {
        confirmationError = ""; // clear error

        if (string.IsNullOrWhiteSpace(registerModel.Username))
        {
            confirmationError = "Username is required for confirmation.";
            return;
        }

        if (string.IsNullOrWhiteSpace(confirmationCode))
        {
            confirmationError = "Confirmation code is required.";
            return;
        }

        try
        {
            bool isConfirmed = await AuthService.ConfirmSignUpAsync(registerModel.Username, confirmationCode);
            if (isConfirmed)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                confirmationError = "Failed to confirm. Please try again.";
            }
        }
        catch (Exception ex)
        {
            confirmationError = ex.Message;
        }
    }


    private async Task ResendCode()
    {
        try
        {
            await AuthService.ResendConfirmationCodeAsync(registerModel.Username);
        }
        catch (Exception ex)
        {
            confirmationError = ex.Message;
        }
    }
}
