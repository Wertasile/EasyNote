@page "/"
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NoteState NoteState

<div class="px-1">
    <div>
        <h3>LOGIN</h3>
    </div>
    <div class="mw-500px">
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <InputText @bind-Value="loginModel.Username" class="form-control" placeholder="Email Address" />
                <div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>
            </div>

            <div class="mb-3">
                <InputText @bind-Value="loginModel.Password" class="form-control" placeholder="Password" type="Password" />
            </div>

            <div class="form-text">
                Your password must be 8-20 characters long, contain letters and numbers, and must not contain spaces,
                special characters, or emoji.
            </div>

            <button type="submit" class="btn btn-primary">LOGIN</button>

        </EditForm>
    </div>
    <div>
        <a href="/register">Click here to make a new account!</a>
    </div>
</div>



@code {
    Dictionary<String, String> Tokens;

    private LoginModel loginModel = new LoginModel();

    private class LoginModel
    {
        public string Password { get; set; }
        public string Username { get; set; }
    }


    protected override async Task OnInitializedAsync()
    {
        Tokens = await localStorage.GetItemAsync<Dictionary<String, String>>("tokens");
        if (Tokens != null)
        {
            Console.WriteLine("Tokens are" + Tokens);
            Navigation.NavigateTo("/home");
        }
    }



    private async Task HandleLogin()
    {
        Tokens = await AuthService.SignInAsync(loginModel.Username, loginModel.Password);
        // get access token from AuthService SignIn METHO
        @* if (!string.IsNullOrEmpty(idToken))
        { *@
        // Store token securely and navigate to the app's main page
        await localStorage.SetItemAsync("tokens", Tokens);
        await localStorage.SetItemAsync("id_token", Tokens["id_token"]);
        await localStorage.SetItemAsync("access_token", Tokens["access_token"]);
        NoteState.username = loginModel.Username;
        Navigation.NavigateTo("/home");
        //}
    }


}