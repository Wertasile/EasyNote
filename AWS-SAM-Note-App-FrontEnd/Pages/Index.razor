@page "/"
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NoteState NoteState

<div class="auth">
    <div class="auth-card">
        <div class="auth-brand">
            <img src="public/Images/EasyNote_Logo.png" alt="EasyNote" class="auth-logo" />
            <div>
                <h3 class="m-0">Welcome back</h3>
                <div class="opacity-75">Sign in to continue to EasyNote</div>
            </div>
        </div>

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Email address</label>
                <InputText @bind-Value="loginModel.Username" class="form-control input-elevated"
                    placeholder="name@example.com" />
                <div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>
            </div>

            <div class="mb-3">
                <label class="form-label">Password</label>
                <InputText @bind-Value="loginModel.Password" class="form-control input-elevated" placeholder="Password"
                    type="Password" />
            </div>

            <div class="d-flex justify-content-between align-items-center mb-3 small opacity-75">
                <span>Use at least 8 characters.</span>
                <a href="#" class="btn-link">Forgot password?</a>
            </div>

            <button type="submit" class="btn btn-primary w-100">Sign in</button>
        </EditForm>

        <div class="text-center mt-3 small opacity-75">
            New here? <a href="/register" class="btn-link">Create an account</a>
        </div>
    </div>

    <div class="auth-art" aria-hidden="true">
        <div class="orb orb-1"></div>
        <div class="orb orb-2"></div>
        <div class="orb orb-3"></div>
    </div>
</div>





@code {
    Dictionary<String, String> Tokens;

    private LoginModel loginModel = new LoginModel();

    private class LoginModel
    {
        public string Password { get; set; }
        public string Username { get; set; }
    }


    protected override async Task OnInitializedAsync()
    {
        Tokens = await localStorage.GetItemAsync<Dictionary<String, String>>("tokens");
        if (Tokens != null)
        {
            Console.WriteLine("Tokens are" + Tokens);
            Navigation.NavigateTo("/home");
        }
    }



    private async Task HandleLogin()
    {
        Tokens = await AuthService.SignInAsync(loginModel.Username, loginModel.Password);
        // get access token from AuthService SignIn METHO
        @* if (!string.IsNullOrEmpty(idToken))
        { *@
        // Store token securely and navigate to the app's main page
        await localStorage.SetItemAsync("tokens", Tokens);
        await localStorage.SetItemAsync("id_token", Tokens["id_token"]);
        await localStorage.SetItemAsync("access_token", Tokens["access_token"]);
        NoteState.username = loginModel.Username;
        Navigation.NavigateTo("/home");
        //}
    }


}