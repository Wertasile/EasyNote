@page "/home"
@inject NotesService NotesService
@inject NoteState NoteState
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<Sidebar OnAddNote="HandleAddNote"></Sidebar>

<div class="content">

    <!-- NOTEBAR -->
    <div class="notebar p-2 d-flex flex-column gap-3">
        <h3><b>NOTES</b> <span class="opacity-50 fs-5">@FilteredNotes.Count()</span></h3>

        <div class="d-flex flex-row gap-2 mb-2">
            <InputText class="form-control" 
                    placeholder="Search notes..." 
                    @bind-Value="searchTerm" 
                    @oninput="OnSearchChanged" />

            <select class="w-[20px]" @bind="selectedFilter">
                <option value="">All</option>
                <option value="today">Today</option>
                <option value="week">This Week</option>
                <option value="month">This Month</option>
            </select>
        </div>

        @if (FilteredNotes == null || !FilteredNotes.Any())
        {
            <div>No notes created yet.</div>
        }
        else
        {
            <div class="d-flex flex-column notes gap-3">
                @foreach (var note in FilteredNotes)
                {
                    <div class="d-flex flex-column border border-primary p-2 bg-primary bg-gradient text-dark">
                        <div @onclick="() => EditNote(note)" class="d-flex flex-row justify-content-between">
                            <div>@((MarkupString)note.NoteTitle)</div>
                            <div @onclick="() => DeleteNoteAsync(note.NoteId)" @onclick:stopPropagation>
                                <i class="bi bi-trash3"></i>
                            </div>
                        </div>
                        <div><i>@TryFormatNoteTime(note.NoteTime)</i></div>
                    </div>
                }
            </div>
        }
    </div>

    <!-- NOTE EDITOR -->
    <div class="notepage d-flex flex-column p-2 border-style gap-2">
        <div class="d-flex flex-row justify-content-between">
            <div><h3>@(NoteState.IsEditing ? "EDIT NOTE" : "ADD NOTE")</h3></div>
            <button class="btn btn-primary" @onclick="SaveNoteAsync">@(NoteState.IsEditing ? "Save Changes" : "Add Note")</button>
        </div>

        <div class="h-75">
            <InputText class="input-decor" @bind-Value="NewNote.NoteTitle" aria-placeholder="Enter Title"/>
            <BlazoredTextEditor @ref="@richEditor">
                <ToolbarContent>@((MarkupString)toolbar)</ToolbarContent>
                <EditorContent>@((MarkupString)NewNote.NoteContent)</EditorContent>
            </BlazoredTextEditor>
        </div>
    </div>
</div>

@code {
    private List<Note> Notes { get; set; } = new();
    private List<Note> FilteredNotes => ApplyFilters();

    private Note NewNote { get; set; } = new();
    private string searchTerm { get; set; } = string.Empty;
    private string selectedFilter { get; set; } = string.Empty;

    BlazoredTextEditor richEditor = default!;
    string toolbar;

    protected override async Task OnInitializedAsync()
    {
        toolbar = """"
            <span class="ql-formats">
                <button class="ql-bold"></button>
                <button class="ql-italic"></button>
                <button class="ql-underline"></button>
                <button class="ql-strike"></button>
            </span>
            <span class="ql-formats">
                <button class="ql-list" value="ordered"></button>
                <button class="ql-list" value="bullet"></button>
                <button class="ql-link"></button>
            </span>
        """";

        await LoadNotesAsync();
        NoteState.IsEditing = false;
    }

    private async Task LoadNotesAsync() => Notes = await NotesService.GetNotesAsync();

    private async Task SaveNoteAsync()
    {
        NewNote.NoteContent = await richEditor.GetHTML();
        if (string.IsNullOrWhiteSpace(NewNote.NoteContent)) return;

        if (NoteState.IsEditing) await UpdateNoteAsync();
        else await AddNoteAsync();
    }

    private async Task AddNoteAsync()
    {
        NewNote.NoteId = Guid.NewGuid().ToString();
        NewNote.NoteTime = DateTime.UtcNow.ToString("o");
        NewNote.Status = "PLACED";
        NewNote.UserId = await localStorage.GetItemAsStringAsync("user_id");

        await NotesService.AddNoteAsync(NewNote);
        NewNote = new();
        await LoadNotesAsync();
        await richEditor.LoadHTMLContent("");
    }

    private async Task UpdateNoteAsync()
    {
        await NotesService.UpdateNoteAsync(NewNote);
        NewNote = new();
        NoteState.IsEditing = false;
        await LoadNotesAsync();
        await richEditor.LoadHTMLContent("");
    }

    private async Task DeleteNoteAsync(string noteId)
    {
        await NotesService.DeleteNoteAsync(noteId);
        await LoadNotesAsync();
    }

    private async Task HandleAddNote()
    {
        NewNote = new Note();
        NoteState.IsEditing = false;
        await richEditor.LoadHTMLContent("");
    }

    private async void EditNote(Note note)
    {
        NewNote = new Note
        {
            NoteId = note.NoteId,
            NoteTitle = note.NoteTitle,
            NoteContent = note.NoteContent,
            NoteTime = DateTime.UtcNow.ToString("o")
        };
        NoteState.IsEditing = true;
        await richEditor.LoadHTMLContent(NewNote.NoteContent);
    }

    private List<Note> ApplyFilters()
    {
        IEnumerable<Note> filtered = Notes ?? new List<Note>();

        // Simple search by NoteTitle
        var query = (searchTerm ?? string.Empty).Trim();
        if (!string.IsNullOrEmpty(query))
        {
            filtered = filtered.Where(n =>
                (n?.NoteTitle ?? string.Empty)
                    .Contains(query, StringComparison.OrdinalIgnoreCase)
            );
        }

        if (!string.IsNullOrEmpty(selectedFilter))
        {
            DateTime now = DateTime.UtcNow;
            filtered = selectedFilter switch
            {
                "today" => filtered.Where(n => TryParseNoteTime(n, out var d) && d.Date == now.Date),
                "week"  => filtered.Where(n => TryParseNoteTime(n, out var d) && d >= now.AddDays(-7)),
                "month" => filtered.Where(n => TryParseNoteTime(n, out var d) && d >= now.AddMonths(-1)),
                _       => filtered
            };
        }

        return filtered.ToList();
    }

    private static bool TryParseNoteTime(Note n, out DateTime dt)
    {
        dt = default;
        if (n == null || string.IsNullOrEmpty(n.NoteTime)) 
            return false;

        return DateTime.TryParse(n.NoteTime, out dt);
    }

    private string TryFormatNoteTime(string noteTime)
    {
        if (DateTime.TryParse(noteTime, out var dt))
            return dt.ToLocalTime().ToString("yyyy-MM-dd HH:mm");
        return string.Empty;
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
    // Trigger UI refresh
        StateHasChanged();
    }
}
