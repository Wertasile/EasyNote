@page "/home"
@inject NotesService NotesService
@inject NoteState NoteState
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<Sidebar></Sidebar>

<div class="content">

    <!-- NOTEBAR -->
    <div class="notebar p-2 d-flex flex-column gap-3">
        <h3><b>NOTES</b></h3>
        <div class="d-flex flex-row justify-content-between opacity-50">
            <div>@Notes.Count() note@(Notes.Count() == 1 ? "" : "s")</div>
        </div>
        @if (Notes == null || !Notes.Any())
        {
            <div>No notes created yet.</div>
        }
        else
        {
            <div class="d-flex flex-column notes gap-3">
                @foreach (var note in Notes)
                {
                    <div class="d-flex flex-column border border-primary p-2 bg-primary bg-gradient text-dark">
                        <div @onclick="() => EditNote(note)" class="d-flex flex-row justify-content-between">
                            <div>@((MarkupString)note.NoteTitle)</div>
                            <div @onclick="() => DeleteNoteAsync(note.NoteId)" @onclick:stopPropagation>
                                <i class="bi bi-trash3"></i>
                            </div>
                        </div>
                        <div>
                            <i>@note.NoteTime.Split(' ')[0]</i>
                            @* <p>@note.NoteContent</p> *@
                        </div>
                    </div>
                   
                }
            </div>
        }
    </div>

    <!-- NOTE EDITOR -->
    <div class="notepage d-flex flex-column p-2 border-style">
        <div class="d-flex flex-row justify-content-between">
            <div><h3>@(NoteState.IsEditing ? "EDIT NOTE" : "ADD NOTE")</h3></div>
            <button class="btn btn-primary" @onclick="SaveNoteAsync">@(NoteState.IsEditing ? "Save Changes" : "Add Note")</button>
        </div>
        
        
        <div class="h-75">
            <InputText class="input-decor" @bind-Value=NewNote.NoteTitle aria-placeholder="Enter Title"/>
            <BlazoredTextEditor
                @ref="@richEditor">
                <ToolbarContent>
                    @((MarkupString) toolbar)
                </ToolbarContent>
                <EditorContent>
                    @((MarkupString) NewNote.NoteContent)
                </EditorContent>
            </BlazoredTextEditor>
        </div>
    </div>
</div>

@code {
    private List<Note> Notes { get; set; } = new();
    private Note NewNote { get; set; } = new();
    private DateTime datetime = DateTime.UtcNow;

    BlazoredTextEditor richEditor = default!;
    string toolbar;

    protected override async Task OnInitializedAsync()
    {
        toolbar = """"
            <select class="ql-header">
                <option selected=""></option>
                <option value="1"></option>
                <option value="2"></option>
                <option value="3"></option>
                <option value="4"></option>
                <option value="5"></option>
            </select>
            <span class="ql-formats">
                <button class="ql-bold"></button>
                <button class="ql-italic"></button>
                <button class="ql-underline"></button>
                <button class="ql-strike"></button>
            </span>
            <span class="ql-formats">
                <select class="ql-color"></select>
                <select class="ql-background"></select>
            </span>
            <span class="ql-formats">
                <button class="ql-list" value="ordered"></button>
                <button class="ql-list" value="bullet"></button>
            </span>
            <span class="ql-formats">
                <button class="ql-link"></button>
            </span>
            """";

        await LoadNotesAsync();
        NoteState.IsEditing = false;
    }

    private async Task LoadNotesAsync()
    {
        Notes = await NotesService.GetNotesAsync();
    }

    private async Task SaveNoteAsync()
    {
        NewNote.NoteContent = await richEditor.GetHTML();

        if (string.IsNullOrWhiteSpace(NewNote.NoteContent))
            return; // avoid saving empty notes

        if (NoteState.IsEditing)
        {
            await UpdateNoteAsync();
        }
        else
        {
            await AddNoteAsync();
        }
    }

    private async Task AddNoteAsync()
    {
        NewNote.NoteId = Guid.NewGuid().ToString();
        NewNote.NoteTime = datetime.ToString();
        NewNote.Status = "PLACED";
        NewNote.UserId = await localStorage.GetItemAsStringAsync("user_id");

        await NotesService.AddNoteAsync(NewNote);
        NewNote = new();
        await LoadNotesAsync();
        await richEditor.LoadHTMLContent(""); // clear editor
    }

    private async void EditNote(Note note)
    {
        NewNote = new Note
        {
            NoteId = note.NoteId,
            NoteTitle = note.NoteTitle,
            NoteContent = note.NoteContent,
            NoteTime = DateTime.Now.ToString()
        };
        NoteState.IsEditing = true;

        // Load existing HTML content into the editor
        await richEditor.LoadHTMLContent(NewNote.NoteContent);
    }


    private async Task UpdateNoteAsync()
    {
        await NotesService.UpdateNoteAsync(NewNote);
        NewNote = new();
        NoteState.IsEditing = false;
        await LoadNotesAsync();
        await richEditor.LoadHTMLContent(""); // clear editor
    }

    private async Task DeleteNoteAsync(string noteId)
    {
        await NotesService.DeleteNoteAsync(noteId);
        await LoadNotesAsync();
    }
}
