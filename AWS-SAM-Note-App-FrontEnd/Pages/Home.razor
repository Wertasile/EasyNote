@page "/home"
@inject NotesService NotesService
@inject NoteState NoteState
@inject Blazored.LocalStorage.ILocalStorageService localStorage

        
        <Sidebar></Sidebar>
        
        <div class="content">
            <!-- NOTEBAR -->
            <div class="notebar p-2 d-flex flex-column gap-3">
                <div>
                    <h3>NOTES</h3>
                </div>
                <div class="d-flex flex-row justify-content-between opacity-50">
                    <div>
                        @Notes.Count() note
                    </div>
                    <div class="d-flex flex-row">
                    <div><i class="bi bi-funnel px-1 sidebar-item"></i></div>
                    <div><i class="bi bi-sort-down px-1 sidebar-item"></i></div>
                </div>
                </div>
                    @if (Notes == null || !Notes.Any())
                    {
                        <div>LOADING</div>
                    }
                    else{
                        <div class="d-flex flex-column notes gap-1">
                        
                        @foreach (var note in Notes)
                        {
                            <div class="d-flex flex-row justify-content-between sidebar-item px-1">
                                <div @onclick="() => EditNote(note)">@note.NoteTitle</div>
                                <div @onclick="() => DeleteNoteAsync(note.NoteId)"><i class="bi bi-trash3"></i></div>
                            </div>
                        }        
                    </div>
                    }
            </div>

            <!-- NOTE -->

            <div class="notepage p-2 border-style">
                <h3>@(NoteState.IsEditing ? "Edit Note" : "Add Note")</h3>
                <input class="input-decor" @bind="NewNote.NoteTitle" placeholder="Title" />
                <textarea @bind="NewNote.NoteContent" placeholder="Enter note content" />
                <input class="input-decor" @bind="NewNote.NoteCategory" placeholder="Enter note category" />
                <div @onclick="() => (NoteState.IsEditing ? UpdateNoteAsync() : AddNoteAsync())">
                    @if (NoteState.IsEditing == true)
                    {
                        <div class="sidebar-item">
                            <i class="bi bi-file-earmark-plus px-1"></i>
                            <span>Save Changes</span>
                        </div>  
                    }
                    else{
                        <div class="sidebar-item inline-flex">
                            <i class="bi bi-file-earmark-plus px-1"></i>
                            <span>Add Note</span>
                        </div>
                    }
                </div>
            </div>
        </div>
        
           
    




@code {
    private List<Note> Notes { get; set; } = new();
    private Note NewNote { get; set; } = new();
    private DateTime datetime = DateTime.UtcNow;

    // function to perform on page load
    protected override async Task OnInitializedAsync()
    {
        await LoadNotesAsync();
        NoteState.IsEditing = false;
    }

    // function to perform based on user interaction
    private async Task LoadNotesAsync()
    {
        Notes = await NotesService.GetNotesAsync();
    }

    private async Task AddNoteAsync()
    {
        NewNote.NoteId = Guid.NewGuid().ToString();
        NewNote.NoteTime = datetime.ToString();
        NewNote.Status = "PLACED";
        NewNote.UserId = await localStorage.GetItemAsStringAsync("user_id");
        await NotesService.AddNoteAsync(NewNote);
        NewNote = new();
        await LoadNotesAsync();
    }

    // FOR EDITING, WE FIRST CREATE A NEW NOTE, UPON ENTERING THE EDIT NOTE PAGE VIA THE EDIT NOTE FUNCTION, THEN WE PERFORM THE ASYNC UPDATE
    
    private void EditNote(Note note)
    {
        NewNote = new Note {
                NoteId = note.NoteId,
                NoteTitle = note.NoteTitle,
                NoteContent = note.NoteContent,
                NoteCategory = note.NoteCategory,
                NoteTime = DateTime.Now.ToString()
    };
        NoteState.IsEditing = true;
    }

    private async Task UpdateNoteAsync()
    {
        await NotesService.UpdateNoteAsync(NewNote);
        NewNote = new();
        NoteState.IsEditing = false;
        await LoadNotesAsync();
    }

    private async Task DeleteNoteAsync(string noteId)
    {
        await NotesService.DeleteNoteAsync(noteId);
        await LoadNotesAsync();
    }
}
