@page "/home"
<Sidebar></Sidebar>

<div class="content p-3 d-flex flex-column gap-3">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h3 class="m-0">Welcome to EasyNote</h3>
            <div class="opacity-75">Quick actions and a snapshot of your notes.</div>
        </div>
        <div class="d-flex gap-2">
            <a class="btn btn-primary" href="/notes"><i class="bi bi-plus me-1"></i>New Note</a>
            <a class="btn btn-secondary" href="/calendar"><i class="bi bi-calendar-event me-1"></i>Open Calendar</a>
        </div>
    </div>

    <div class="d-flex flex-wrap gap-3">
        <div class="dashboard-card">
            <div class="card-title">Recent Notes</div>
            <div class="card-body d-flex flex-column gap-2">
                @if (recentNotes == null || recentNotes.Count == 0)
                {
                    <div class="opacity-75">No recent notes.</div>
                }
                else
                {
                    @foreach (var n in recentNotes)
                    {
                        <a class="link-light text-decoration-none d-flex justify-content-between align-items-center dashboard-item"
                            href="/notes?noteId=@n.NoteId">
                            <span class="text-truncate">@((MarkupString)n.NoteTitle)</span>
                            <span class="small opacity-75">@FormatShort(n.NoteTime)</span>
                        </a>
                    }
                }
            </div>
        </div>

        <div class="dashboard-card">
            <div class="card-title">Quick Links</div>
            <div class="card-body d-grid gap-2">
                <a class="btn btn-outline-light" href="/notes"><i class="bi bi-stickies me-1"></i>All Notes</a>
                <a class="btn btn-outline-light" href="/calendar"><i class="bi bi-calendar3 me-1"></i>Calendar</a>
                <a class="btn btn-outline-light" href="/category"><i class="bi bi-tag me-1"></i>Categories</a>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Note> recentNotes = new();

    [Inject] private NotesService NotesService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var all = await NotesService.GetNotesAsync();
        recentNotes = (all ?? new List<Note>())
        .Where(n => DateTime.TryParse(n.NoteTime, out _))
        .OrderByDescending(n => DateTime.Parse(n.NoteTime))
        .Take(5)
        .ToList();
    }

    private string FormatShort(string noteTime)
    {
        if (DateTime.TryParse(noteTime, out var dt))
            return dt.ToLocalTime().ToString("MMM d");
        return string.Empty;
    }
}
